AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodePipeline for Blue/Green Deployment with ECR Integration'

Parameters:
  ProjectName:
    Type: String
    Default: 'webapp'
    Description: 'Name of the project for resource naming'

  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'

  ContainerPort:
    Type: Number
    Default: 8080
    Description: 'Port your ECS container listens on'

  ExistingArtifactsBucketName:
    Type: String
    Default: 'webapp-prod-codepipeline-artifacts-314146322404-eu-central-1'
    Description: 'Name of existing S3 bucket for CodePipeline artifacts'

Resources:
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-CodePipeline-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                Resource: !Sub 'arn:aws:s3:::${ExistingArtifactsBucketName}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${ExistingArtifactsBucketName}'
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-CodeDeploy-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub '${ProjectName}-${Environment}-app'
      ComputePlatform: ECS

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub '${ProjectName}-${Environment}-deployment-group'
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSLinear10PercentEvery1Minutes
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !ImportValue !Sub '${ProjectName}-${Environment}-Blue-TG-Name'
              - Name: !ImportValue !Sub '${ProjectName}-${Environment}-Green-TG-Name'
            ProdTrafficRoute:
              ListenerArns:
                - !ImportValue !Sub '${ProjectName}-${Environment}-ALB-Listener-ARN'
      ECSServices:
        - ServiceName: !ImportValue !Sub '${ProjectName}-${Environment}-ECS-Service-Name'
          ClusterName: !ImportValue !Sub '${ProjectName}-${Environment}-ECS-Cluster-Name'

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-pipeline'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ExistingArtifactsBucketName
      Stages:
        - Name: Source
          Actions:
            - Name: ECRSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: ECR
                Version: '1'
              OutputArtifacts:
                - Name: ImageArtifact
              Configuration:
                RepositoryName: !Sub '${ProjectName}-${Environment}-app'
                ImageTag: latest
                PollForSourceChanges: false # Will be triggered by EventBridge
              RunOrder: 1
            - Name: DeploymentBundleSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              OutputArtifacts:
                - Name: DeployArtifact
              Configuration:
                S3Bucket: !Ref ExistingArtifactsBucketName
                S3ObjectKey: 'deployment/deployment.zip'
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: '1'
              InputArtifacts:
                - Name: ImageArtifact
                - Name: DeployArtifact
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                TaskDefinitionTemplateArtifact: DeployArtifact
                TaskDefinitionTemplatePath: taskdef.json
                AppSpecTemplateArtifact: DeployArtifact
                AppSpecTemplatePath: appspec.yaml
                Image1ContainerName: !Sub '${ProjectName}-${Environment}-container'
                Image1ArtifactName: ImageArtifact
              RunOrder: 1

  ECRImagePushEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'ECRImagePushEventRule-${ProjectName}-${Environment}'
      Description: 'Rule to trigger CodePipeline on ECR image push'
      EventPattern:
        source:
          - aws.ecr
        detail-type:
          - "ECR Image Action"
        detail:
          action-type:
            - PUSH
          result:
            - SUCCESS
          repository-name:
            - !Sub '${ProjectName}-${Environment}-app'
          image-tag:
            - latest
      Targets:
        - Arn: !GetAtt CodePipeline.Arn
          Id: "CodePipelineTrigger"
          RoleArn: !GetAtt CodePipelineEventRole.Arn

  CodePipelineEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CodePipeline-Trigger-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "codepipeline:StartPipelineExecution"
                Resource: !GetAtt CodePipeline.Arn

Outputs:
  CodePipelineName:
    Description: 'CodePipeline Name'
    Value: !Ref CodePipeline
    Export:
      Name: !Sub '${ProjectName}-${Environment}-CodePipeline-Name'

  CodeDeployApplicationName:
    Description: 'CodeDeploy Application Name'
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub '${ProjectName}-${Environment}-CodeDeploy-App-Name'

  ArtifactsBucketName:
    Description: 'S3 Artifacts Bucket Name'
    Value: !Ref ExistingArtifactsBucketName
    Export:
      Name: !Sub '${ProjectName}-${Environment}-Artifacts-Bucket-Name'