name: CloudFormation Deployment

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  PROJECT_NAME: webapp
  ENVIRONMENT: prod
  ARTIFACTS_BUCKET: webapp-prod-codepipeline-artifacts-314146322404-eu-central-1

jobs:
  validate-templates:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Validate CloudFormation templates
        run: |
          find . -name "*.yaml" -o -name "*.yml" | grep -E "\.(yaml|yml)$" | while read template; do
            if [[ "$template" == *".github/workflows"* ]]; then
              continue
            fi
            echo "Validating $template"
            aws cloudformation validate-template --template-body file://$template || exit 1
          done

  deploy-vpc:
    needs: validate-templates
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Deploy VPC Stack
        run: |
          aws cloudformation deploy \
            --template-file vpc.yaml \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-vpc \
            --parameter-overrides \
                ProjectName=${{ env.PROJECT_NAME }} \
                Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

          aws cloudformation wait stack-create-complete \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-vpc || {
            echo "VPC deployment failed!"
            aws cloudformation describe-stack-events \
              --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-vpc \
              --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[ResourceType, ResourceStatusReason]' \
              --output table
            exit 1
          }

  deploy-loadbalancer:
    needs: deploy-vpc
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Deploy Load Balancer Stack
        run: |
          aws cloudformation deploy \
            --template-file loadbalancer.yaml \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-loadbalancer \
            --parameter-overrides \
                ProjectName=${{ env.PROJECT_NAME }} \
                Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

          aws cloudformation wait stack-create-complete \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-loadbalancer || {
            echo "Load Balancer deployment failed!"
            aws cloudformation describe-stack-events \
              --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-loadbalancer \
              --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[ResourceType, ResourceStatusReason]' \
              --output table
            exit 1
          }

  deploy-ecs-blue:
    needs: deploy-loadbalancer
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Deploy ECS Blue Stack
        run: |
          aws cloudformation deploy \
            --template-file ecs-cluster-blue.yaml \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-ecs-blue \
            --parameter-overrides \
                ProjectName=${{ env.PROJECT_NAME }} \
                Environment=${{ env.ENVIRONMENT }} \
                DeploymentEnvironment=blue \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

          aws cloudformation wait stack-create-complete \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-ecs-blue || {
            echo "ECS Blue deployment failed!"
            aws cloudformation describe-stack-events \
              --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-ecs-blue \
              --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[ResourceType, ResourceStatusReason]' \
              --output table
            exit 1
          }

  deploy-ecs-green:
    needs: deploy-ecs-blue
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Deploy ECS Green Stack
        run: |
          aws cloudformation deploy \
            --template-file ecs-cluster-green.yaml \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-ecs-green \
            --parameter-overrides \
                ProjectName=${{ env.PROJECT_NAME }} \
                Environment=${{ env.ENVIRONMENT }} \
                DeploymentEnvironment=green \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

          aws cloudformation wait stack-create-complete \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-ecs-green || {
            echo "ECS Green deployment failed!"
            aws cloudformation describe-stack-events \
              --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-ecs-green \
              --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[ResourceType, ResourceStatusReason]' \
              --output table
            exit 1
          }

  deploy-pipeline:
    needs: deploy-ecs-green
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Deploy Pipeline Stack
        run: |
          aws cloudformation deploy \
            --template-file codepipeline.yaml \
            --stack-name webapp-prod-pipeline \
            --parameter-overrides \
                ProjectName=webapp \
                Environment=prod \
                GitHubOwner=Abynahisblue \
                GitHubRepo=aws-java-react-app \
                GitHubBranch=main \
                GitHubTokenSecret=github-token \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

          aws cloudformation wait stack-create-complete \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-pipeline || {
            echo "Pipeline deployment failed!"
            aws cloudformation describe-stack-events \
              --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-pipeline \
              --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[ResourceType, ResourceStatusReason]' \
              --output table
            exit 1
          }